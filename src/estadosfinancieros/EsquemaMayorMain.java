/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EsquemaMayorMain.java
 *
 * Created on Aug 28, 2009, 7:39:37 PM
 */
package estadosfinancieros;

import java.awt.Color;
import java.awt.Component;
import java.awt.Rectangle;
import java.beans.PropertyVetoException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.Query;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.apache.bcel.generic.PUTFIELD;
import javax.swing.GroupLayout.*;

/**
 *
 * @author sxceron
 */
public class EsquemaMayorMain extends javax.swing.JFrame {

    private Balance balance = null;
    Map<String, JTable> currentEsquemas = new HashMap<String, JTable>();
    Map<String, JTable> currentSaldos = new HashMap<String, JTable>();
    Map<String, JLabel> Saldos = new HashMap<String, JLabel>();
    Double utilidadnt;
    String meses[] = new String[]{"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio",
        "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};
    private String selectedBalance;

    /** Creates new form EsquemaMayorMain */
    public EsquemaMayorMain() {
    }

    public void init() {
        initComponents();
        jButton2.setText("Ver Estado de Resultados");
        this.setTitle(getBalance().getEmpresa().getNombre() + " :: " + DateFormat.getDateInstance().format(getBalance().getFecha()));
        // This will be do before
        /*Query empresaQuery = finanzasPUEntityManager.createQuery("SELECT e FROM Empresa e WHERE e.nombre = :nombre");
        empresaQuery.setParameter("nombre", "LaCiudadX S.A.");
        Empresa empresa = (Empresa) empresaQuery.getSingleResult();
        empresa = finanzasPUEntityManager.merge(empresa);

        balance = empresa.getBalances().iterator().next();*/
        // This will do before

        Query cuentasQuery = finanzasPUEntityManager.createQuery("SELECT c FROM Cuenta c");
        List<Cuenta> cuentas = cuentasQuery.getResultList();
        String scuentas[] = new String[cuentas.size()];
        int k = 0;
        for (Cuenta c : cuentas) {
            CuentaCombo.addItem(c.getNombre());
            scuentas[k++] = c.getNombre();
        }

        for (Esquema esquema : getBalance().getEsquemas()) {
            mostrarEsquema(esquema.getCuenta().getNombre(), esquema);
        }

        for (Cuenta c : getCurrentCuentas()) {
            CuentaCombo.removeItem(c.getNombre());
        }

        for (Balance b : balance.getEmpresa().getBalances()) {
            otrosbalances.addItem(DateFormat.getDateInstance().format(b.getFecha()));
        }

        // For new Operation

        TableColumn colc = tcargos.getColumnModel().getColumn(1);
        colc.setCellEditor(new MyComboBoxEditor(scuentas));
        colc.setCellRenderer(new MyComboBoxRenderer(scuentas));

        TableColumn cola = tabonos.getColumnModel().getColumn(1);
        cola.setCellEditor(new MyComboBoxEditor(scuentas));
        cola.setCellRenderer(new MyComboBoxRenderer(scuentas));

        cascade(desktop);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        finanzasPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("finanzasPU").createEntityManager();
        cargoQuery = java.beans.Beans.isDesignTime() ? null : finanzasPUEntityManager.createQuery("SELECT c FROM Cargo c");
        cargoList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : cargoQuery.getResultList();
        jButton1 = new javax.swing.JButton();
        generarb = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        desktop = new javax.swing.JDesktopPane();
        OpenAccountFrame = new javax.swing.JInternalFrame();
        CuentaCombo = new javax.swing.JComboBox();
        CuentaLbl = new javax.swing.JLabel();
        CuentaCancelar = new javax.swing.JButton();
        CuentaAceptar = new javax.swing.JButton();
        registerOperation = new javax.swing.JInternalFrame();
        cargolbl = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tcargos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabonos = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        concepto = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        regop = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        error1lbl = new javax.swing.JLabel();
        razonesestandar = new javax.swing.JInternalFrame();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        liq = new javax.swing.JTextField();
        sol = new javax.swing.JTextField();
        est = new javax.swing.JTextField();
        inm = new javax.swing.JTextField();
        ven = new javax.swing.JTextField();
        inv = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        CompareWindow = new javax.swing.JInternalFrame();
        otrosbalances = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        taxes2 = new javax.swing.JCheckBox();
        jButton8 = new javax.swing.JButton();
        generarb1 = new javax.swing.JButton();
        generarb2 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        taxes = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(estadosfinancieros.EstadosFinancierosApp.class).getContext().getResourceMap(EsquemaMayorMain.class);
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        generarb.setText(resourceMap.getString("generarb.text")); // NOI18N
        generarb.setName("generarb"); // NOI18N
        generarb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarbActionPerformed(evt);
            }
        });

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        desktop.setAutoscrolls(true);
        desktop.setName("desktop"); // NOI18N

        OpenAccountFrame.setTitle(resourceMap.getString("NuevaCuentaFrame.title")); // NOI18N
        OpenAccountFrame.setName("NuevaCuentaFrame"); // NOI18N

        CuentaCombo.setName("CUentaCombo"); // NOI18N

        CuentaLbl.setText(resourceMap.getString("Cuentalbl.text")); // NOI18N
        CuentaLbl.setName("Cuentalbl"); // NOI18N

        CuentaCancelar.setText(resourceMap.getString("CuentaCancelar.text")); // NOI18N
        CuentaCancelar.setName("CuentaCancelar"); // NOI18N

        CuentaAceptar.setText(resourceMap.getString("CuentaAceptar.text")); // NOI18N
        CuentaAceptar.setName("CuentaAceptar"); // NOI18N
        CuentaAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CuentaAceptarActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout OpenAccountFrameLayout = new org.jdesktop.layout.GroupLayout(OpenAccountFrame.getContentPane());
        OpenAccountFrame.getContentPane().setLayout(OpenAccountFrameLayout);
        OpenAccountFrameLayout.setHorizontalGroup(
            OpenAccountFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(OpenAccountFrameLayout.createSequentialGroup()
                .addContainerGap()
                .add(CuentaLbl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(OpenAccountFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, OpenAccountFrameLayout.createSequentialGroup()
                        .add(CuentaCancelar)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(CuentaAceptar))
                    .add(CuentaCombo, 0, 156, Short.MAX_VALUE))
                .addContainerGap())
        );
        OpenAccountFrameLayout.setVerticalGroup(
            OpenAccountFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(OpenAccountFrameLayout.createSequentialGroup()
                .addContainerGap()
                .add(OpenAccountFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(CuentaCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(CuentaLbl))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 206, Short.MAX_VALUE)
                .add(OpenAccountFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(CuentaAceptar)
                    .add(CuentaCancelar))
                .addContainerGap())
        );

        OpenAccountFrame.setBounds(0, 0, -1, -1);
        desktop.add(OpenAccountFrame, javax.swing.JLayeredPane.DEFAULT_LAYER);

        registerOperation.setTitle(resourceMap.getString("registerOperation.title")); // NOI18N
        registerOperation.setName("registerOperation"); // NOI18N

        cargolbl.setText(resourceMap.getString("cargolbl.text")); // NOI18N
        cargolbl.setName("cargolbl"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tcargos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Cantidad", "Concepto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tcargos.setName("tcargos"); // NOI18N
        jScrollPane1.setViewportView(tcargos);
        tcargos.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tcargos.columnModel.title0")); // NOI18N
        tcargos.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tcargos.columnModel.title1")); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tabonos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Cantidad", "Concepto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabonos.setName("tabonos"); // NOI18N
        jScrollPane2.setViewportView(tabonos);
        tabonos.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tcargos.columnModel.title0")); // NOI18N
        tabonos.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tcargos.columnModel.title1")); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        concepto.setColumns(20);
        concepto.setRows(5);
        concepto.setName("concepto"); // NOI18N
        jScrollPane3.setViewportView(concepto);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        regop.setText(resourceMap.getString("regop.text")); // NOI18N
        regop.setName("regop"); // NOI18N
        regop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regopActionPerformed(evt);
            }
        });

        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        error1lbl.setText(resourceMap.getString("error1lbl.text")); // NOI18N
        error1lbl.setName("error1lbl"); // NOI18N

        org.jdesktop.layout.GroupLayout registerOperationLayout = new org.jdesktop.layout.GroupLayout(registerOperation.getContentPane());
        registerOperation.getContentPane().setLayout(registerOperationLayout);
        registerOperationLayout.setHorizontalGroup(
            registerOperationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(registerOperationLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 280, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, registerOperationLayout.createSequentialGroup()
                .add(130, 130, 130)
                .add(cargolbl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 300, Short.MAX_VALUE)
                .add(jLabel1)
                .add(134, 134, 134))
            .add(registerOperationLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, registerOperationLayout.createSequentialGroup()
                .addContainerGap()
                .add(error1lbl, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(jButton3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(regop)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, registerOperationLayout.createSequentialGroup()
                .addContainerGap(322, Short.MAX_VALUE)
                .add(jLabel2)
                .add(258, 258, 258))
        );
        registerOperationLayout.setVerticalGroup(
            registerOperationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(registerOperationLayout.createSequentialGroup()
                .addContainerGap()
                .add(registerOperationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, registerOperationLayout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane2, 0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, registerOperationLayout.createSequentialGroup()
                        .add(cargolbl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(registerOperationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(regop)
                    .add(jButton3)
                    .add(error1lbl))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        registerOperation.setBounds(230, 150, 650, 270);
        desktop.add(registerOperation, javax.swing.JLayeredPane.DEFAULT_LAYER);

        razonesestandar.setTitle(resourceMap.getString("razonesestandar.title")); // NOI18N
        razonesestandar.setName("razonesestandar"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        liq.setText(resourceMap.getString("liq.text")); // NOI18N
        liq.setName("liq"); // NOI18N

        sol.setName("sol"); // NOI18N

        est.setName("est"); // NOI18N

        inm.setName("inm"); // NOI18N

        ven.setName("ven"); // NOI18N

        inv.setName("inv"); // NOI18N

        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setName("jButton4"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText(resourceMap.getString("jButton5.text")); // NOI18N
        jButton5.setName("jButton5"); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout razonesestandarLayout = new org.jdesktop.layout.GroupLayout(razonesestandar.getContentPane());
        razonesestandar.getContentPane().setLayout(razonesestandarLayout);
        razonesestandarLayout.setHorizontalGroup(
            razonesestandarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(razonesestandarLayout.createSequentialGroup()
                .addContainerGap()
                .add(razonesestandarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(razonesestandarLayout.createSequentialGroup()
                        .add(jButton4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton5))
                    .add(razonesestandarLayout.createSequentialGroup()
                        .add(razonesestandarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3)
                            .add(jLabel4)
                            .add(jLabel5)
                            .add(jLabel6)
                            .add(jLabel7)
                            .add(jLabel8))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 35, Short.MAX_VALUE)
                        .add(razonesestandarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(liq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(sol, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(est, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(inm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(ven, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(inv, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        razonesestandarLayout.setVerticalGroup(
            razonesestandarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(razonesestandarLayout.createSequentialGroup()
                .add(13, 13, 13)
                .add(razonesestandarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(liq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(razonesestandarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(sol, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(razonesestandarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(est, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(razonesestandarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(inm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(razonesestandarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(ven, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(razonesestandarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(inv, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(razonesestandarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton5)
                    .add(jButton4))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        razonesestandar.setBounds(270, 160, 310, 260);
        desktop.add(razonesestandar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        CompareWindow.setTitle(resourceMap.getString("CompareWindow.title")); // NOI18N
        CompareWindow.setName("CompareWindow"); // NOI18N

        otrosbalances.setName("otrosbalances"); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedBalance}"), otrosbalances, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        jButton7.setText(resourceMap.getString("jButton7.text")); // NOI18N
        jButton7.setName("jButton7"); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        taxes2.setText(resourceMap.getString("taxes2.text")); // NOI18N
        taxes2.setName("taxes2"); // NOI18N

        jButton8.setText(resourceMap.getString("jButton8.text")); // NOI18N
        jButton8.setName("jButton8"); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout CompareWindowLayout = new org.jdesktop.layout.GroupLayout(CompareWindow.getContentPane());
        CompareWindow.getContentPane().setLayout(CompareWindowLayout);
        CompareWindowLayout.setHorizontalGroup(
            CompareWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(CompareWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel9)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(CompareWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(CompareWindowLayout.createSequentialGroup()
                        .add(taxes2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton8)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 40, Short.MAX_VALUE)
                        .add(jButton7))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, otrosbalances, 0, 263, Short.MAX_VALUE))
                .addContainerGap())
        );
        CompareWindowLayout.setVerticalGroup(
            CompareWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(CompareWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(CompareWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(otrosbalances, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel9))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(CompareWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton7)
                    .add(taxes2)
                    .add(jButton8))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        CompareWindow.setBounds(250, 330, 380, 100);
        desktop.add(CompareWindow, javax.swing.JLayeredPane.DEFAULT_LAYER);

        generarb1.setText(resourceMap.getString("generarb1.text")); // NOI18N
        generarb1.setName("generarb1"); // NOI18N
        generarb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarb1ActionPerformed(evt);
            }
        });

        generarb2.setText(resourceMap.getString("generarb2.text")); // NOI18N
        generarb2.setName("generarb2"); // NOI18N
        generarb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarb2ActionPerformed(evt);
            }
        });

        jButton6.setText(resourceMap.getString("jButton6.text")); // NOI18N
        jButton6.setName("jButton6"); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        taxes.setText(resourceMap.getString("taxes.text")); // NOI18N
        taxes.setName("taxes"); // NOI18N

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N
        jMenuBar1.add(jMenu1);

        jMenu2.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu2.setName("jMenu2"); // NOI18N
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(desktop, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 960, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jButton1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(generarb)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(generarb1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(generarb2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jButton6)
                        .add(18, 18, 18)
                        .add(taxes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(desktop, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 675, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(jButton2)
                    .add(generarb)
                    .add(generarb1)
                    .add(generarb2)
                    .add(jButton6)
                    .add(taxes))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // OpenAccountFrame.setVisible(true);
        registerOperation.setVisible(true);

}//GEN-LAST:event_jButton1ActionPerformed

    private Set<Cuenta> getCurrentCuentas() {
        Set<Cuenta> cuentas = new HashSet<Cuenta>();
        for (Esquema e : getBalance().getEsquemas()) {
            cuentas.add(e.getCuenta());
        }
        return cuentas;
    }

    private void CuentaAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CuentaAceptarActionPerformed

        String nombre = (String) CuentaCombo.getSelectedItem();
        Esquema e = addEsquema(nombre);
        mostrarEsquema(nombre, e);
        CuentaCombo.removeItem(nombre);
    }//GEN-LAST:event_CuentaAceptarActionPerformed

    private Esquema addEsquema(String nombre) {

        Query cuentaQuery = finanzasPUEntityManager.createQuery("SELECT c FROM Cuenta c WHERE c.nombre = :nombre");
        cuentaQuery.setParameter("nombre", nombre);

        Cuenta cuenta = (Cuenta) cuentaQuery.getSingleResult();
        Set<Cuenta> cuentas = getCurrentCuentas();
        if (cuentas.contains(cuenta)) {
            return null;
        }

        Esquema newEsquema = new Esquema();
        newEsquema.setCuenta(cuenta);
        newEsquema.setBalance(getBalance());
        final boolean act = finanzasPUEntityManager.getTransaction().isActive();

        if (!act) {
            finanzasPUEntityManager.getTransaction().begin();
        }

        getBalance().getEsquemas().add(newEsquema);
        finanzasPUEntityManager.persist(getBalance());

        if (!act) {
            finanzasPUEntityManager.getTransaction().commit();
        }

        return newEsquema;
    }

    public void deleteEsquema(String nombre) {
        //finanzasPUEntityManager.refresh(balance);

        Esquema e = getEsquema(nombre, getBalance());
        if (e == null) {
            return;
        }


        for (Operacion o : getOperaciones(e)) {
            for (Cargo c : o.getCargos()) {
                c.getEsquema().getCargos().remove(c);
                finanzasPUEntityManager.remove(c);
            }

            for (Abono a : o.getAbonos()) {
                a.getEsquema().getAbonos().remove(a);
                finanzasPUEntityManager.remove(a);
            }
            finanzasPUEntityManager.remove(o);
        }


        //;
        getBalance().getEsquemas().remove(e);
        finanzasPUEntityManager.persist(getBalance());
        finanzasPUEntityManager.remove(e);

        finanzasPUEntityManager.getTransaction().begin();
        finanzasPUEntityManager.getTransaction().commit();

        currentEsquemas.remove(nombre);
    }

    public List<Operacion> getOperaciones(Esquema e) {
        List<Operacion> ops = new ArrayList<Operacion>();
        for (Cargo c : e.getCargos()) {
            if (!sameOperacion(ops, c.getOperacion())) {
                ops.add(c.getOperacion());
            }
        }

        for (Abono a : e.getAbonos()) {
            if (!sameOperacion(ops, a.getOperacion())) {
                ops.add(a.getOperacion());
            }
        }

        return ops;
    }

    public boolean sameOperacion(List<Operacion> ops, Operacion o) {
        //boolean same = false;
        for (Operacion op : ops) {
            if (op.equals(o)) {
                return true;
            }
        }
        return false;
    }

    private void regopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regopActionPerformed

        List<Esquema> newEsquemas = new ArrayList<Esquema>();

        TableModel cmodel = tcargos.getModel();
        TableModel amodel = tabonos.getModel();
        int szc = cmodel.getRowCount();
        int sza = cmodel.getRowCount();
        Double sumaCargos = 0.0, sumaAbonos = 0.0;
        String cuenta;
        Double cantidad;
        int k;

        Operacion op = new Operacion();

        //final boolean act = finanzasPUEntityManager.getTransaction().isActive();

        //if (!act) {
        finanzasPUEntityManager.getTransaction().begin();
        //}

        //finanzasPUEntityManager.persist(op);

        for (k = 0; k < szc; k++) {
            try {
                cuenta = cmodel.getValueAt(k, 1).toString();
                cantidad = Double.valueOf(cmodel.getValueAt(k, 0).toString());

                Cargo c = new Cargo();
                Esquema e = getEsquema(cuenta, getBalance());
                if (e == null) {
                    for (Esquema s : newEsquemas) {
                        if (s.getCuenta().getNombre().equals(cuenta)) {
                            e = s;
                        }
                    }
                    if (e == null) {
                        e = addEsquema(cuenta);
                        newEsquemas.add(e);
                    }
                }

                op.getCargos().add(c);
                c.setCantidad(cantidad);
                c.setEsquema(e);
                c.setOperacion(op);
                c.setConcepto(concepto.getText());

                e.getCargos().add(c);
                finanzasPUEntityManager.persist(e);

                sumaCargos += cantidad;
            } catch (Exception e) {
                //e.printStackTrace();
            }
        }

        //finanzasPUEntityManager.persist(op);

        for (k = 0; k < sza; k++) {
            try {
                cuenta = amodel.getValueAt(k, 1).toString();
                cantidad = Double.valueOf(amodel.getValueAt(k, 0).toString());

                Abono a = new Abono();
                System.out.println(cuenta);
                Esquema e = getEsquema(cuenta, getBalance());
                if (e == null) {
                    for (Esquema s : newEsquemas) {
                        if (s.getCuenta().getNombre().equals(cuenta)) {
                            e = s;
                        }
                    }
                    if (e == null) {
                        e = addEsquema(cuenta);
                        newEsquemas.add(e);
                    }
                }

                op.getAbonos().add(a);
                a.setCantidad(cantidad);
                a.setOperacion(op);
                a.setEsquema(e);
                a.setConcepto(concepto.getText());

                e.getAbonos().add(a);
                finanzasPUEntityManager.persist(e);

                sumaAbonos += cantidad;
            } catch (Exception e) {
                //e.printStackTrace();
            }
            //cascade(desktop);
        }

        finanzasPUEntityManager.persist(op);

        finanzasPUEntityManager.persist(getBalance());

        System.out.println(sumaCargos + " - " + sumaAbonos);
        /*if (sumaCargos - sumaAbonos != 0.0) {
        error1lbl.setText("La suma de cargos es diferetente a la de abonos hechos.");
        finanzasPUEntityManager.getTransaction().rollback();
        return;
        }*/

        finanzasPUEntityManager.refresh(getBalance());

        for (JTable tabla : currentEsquemas.values()) {
            refreshEsquema(tabla.getName());
        }

        for (Esquema e : newEsquemas) {
            mostrarEsquema(e.getCuenta().getNombre(), e);
        }

        //if (!act) {
        finanzasPUEntityManager.getTransaction().commit();
        //}
        for (k = 0; k < cmodel.getRowCount(); k++) {
            cmodel.setValueAt(null, k, 0);
            cmodel.setValueAt(null, k, 1);
        }

        for (k = 0; k < amodel.getRowCount(); k++) {
            amodel.setValueAt(null, k, 0);
            amodel.setValueAt(null, k, 1);
        }
        registerOperation.setVisible(false);
    }//GEN-LAST:event_regopActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        registerOperation.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private Map balancegeneral(Balance b, boolean print, boolean hasImpuestos) {
        Map par = generarEstadoResultados(b, hasImpuestos);
        Map parametro = new HashMap();
        finanzasPUEntityManager.refresh(getBalance());
        Connection conn = null;
        final String login = "root"; //usuario de acceso a MySQL
        final String password = "samurai1"; //contraseña de usuario
        String url = "jdbc:mysql://127.0.0.1/finanzas";

        try {
            Class.forName("com.mysql.jdbc.Driver"); //se carga el driver
            conn = DriverManager.getConnection(url, login, password);
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }


        try {
            String master = this.getClass().getResource("BalanceGeneral_1.jasper").getFile();

            System.out.println("master" + master);
            if (master == null) {
                System.out.println("No encuentro el archivo del reporte maestro.");
                System.exit(2);
            }

            JasperReport masterReport = null;
            try {
                masterReport = (JasperReport) JRLoader.loadObject(master);
            } catch (JRException e) {
                System.out.println("Error cargando el reporte maestro: " + e.getMessage());
                System.exit(3);
            }

            // Estado de resultados


            //este es el parámetro, se pueden agregar más parámetros
            //basta con poner mas parametro.put

            parametro.put("empresa", b.getEmpresa().getNombre());

            int ac = 1, af = 1, ad = 1, pc = 1, pf = 1;
            Double tac = 0.0, taf = 0.0, tad = 0.0;
            Double tpc = 0.0, tpf = 0.0;

            Map activoc = new HashMap();
            Map activof = new HashMap();
            Map activod = new HashMap();
            Map pasivoc = new HashMap();
            Map pasivof = new HashMap();
            Map capital = new HashMap();
            for (Esquema e : b.getEsquemas()) {
                switch (e.getCuenta().getTipo()) {
                    case 1:
                        if (ac == 1) {
                            parametro.put("ac_" + (ac), String.format("%-85s$", e.getCuenta().getNombre()));
                        } else {
                            parametro.put("ac_" + (ac), e.getCuenta().getNombre());
                        }
                        if (e.getCuenta().getNombre().equals("Bancos")) {
                            parametro.put("bancos", e.getSaldo());
                        }

                        if (e.getCuenta().getNombre().equals("Caja")) {
                            parametro.put("caja", e.getSaldo());
                        }

                        parametro.put("ac_" + (ac) + "_1", e.getSaldo());
                        activoc.put(e.getCuenta().getNombre(), e.getSaldo());
                        tac += e.getSaldo();
                        ac++;
                        break;
                    case 2:
                        parametro.put("af_" + (af), e.getCuenta().getNombre());
                        parametro.put("af_" + (af) + "_1", e.getSaldo());
                        activof.put(e.getCuenta().getNombre(), e.getSaldo());
                        taf += e.getSaldo();
                        af++;
                        break;
                    case 3:
                        parametro.put("ad_" + (ad), e.getCuenta().getNombre());
                        parametro.put("ad_" + (ad) + "_1", e.getSaldo());
                        activod.put(e.getCuenta().getNombre(), e.getSaldo());
                        tad += e.getSaldo();
                        ad++;
                        break;
                    case 4:
                        if (pc == 1) {
                            parametro.put("pc_" + (pc), String.format("%-55s$", e.getCuenta().getNombre()));
                        } else {
                            parametro.put("pc_" + (pc), e.getCuenta().getNombre());
                        }
                        parametro.put("pc_" + (pc) + "_1", e.getSaldo());
                        pasivoc.put(e.getCuenta().getNombre(), e.getSaldo());
                        tpc += e.getSaldo();
                        pc++;
                        break;
                    case 5:
                        if (pf == 1 && pc == 1) {
                            parametro.put("pf_" + (pf), String.format("%-85s$", e.getCuenta().getNombre()));
                        } else {
                            parametro.put("pf_" + (pf), e.getCuenta().getNombre());
                        }
                        parametro.put("pf_" + (pf) + "_1", e.getSaldo());
                        pasivof.put(e.getCuenta().getNombre(), e.getSaldo());
                        tpf += e.getSaldo();
                        pf++;
                        break;
                    /*case 6:
                    parametro.put("ac" + (ac++), formato);
                    break;
                    case 7:
                    parametro.put("ac" + (ac++), formato);
                    break;*/
                }
            }

            if (par.get("impuestos") != null) {
                parametro.put("pc_" + (pc), "Impuestos por pagar");
                parametro.put("pc_" + (pc) + "_1", par.get("impuestos"));
                tpc += (Double) par.get("impuestos");
                pasivoc.put("impuestos", par.get("impuestos"));
                pc++;
            }


            // Activo
            parametro.put("totalac_" + (ac - 1), tac);
            parametro.put("activoc_", tac);
            parametro.put("totalaf_" + (af - 1), taf);
            parametro.put("activof_", taf);
            parametro.put("totalad_" + (ad - 1), tad);
            parametro.put("totalactivo", tac + taf + tad);
            //System.out.println(ac+af+ad-3);
            parametro.put("activoline", ac + af + ad - 3);

            // Pasivo
            parametro.put("totalpc_" + (pc - 1), tpc);
            parametro.put("pasivoc_", tpc);
            parametro.put("totalpf_" + (pf - 1), tpf);
            parametro.put("pasivoline", pc + pf - 2);

            // Capital social
            Double capitalsocial = 0.0;
            if (getEsquema("Capital Social", b) != null) {
                capitalsocial = getEsquema("Capital Social", b).getSaldo();
            }
            parametro.put("capitals", capitalsocial);

            // Utilidad
            parametro.put("utilidad", "Utilidad neta");
            parametro.put("utilidadn", par.get("utlidadneta"));
            /*if( Boolean.parseBoolean(par.get("perdidas").toString()) ){
            parametro.put("utilidad", "Perdida neta");
            parametro.put("utilidadn", par.get("utlidadneta"));
            }*/


            // Para las diferencias
            parametro.put("activoc", activoc);
            parametro.put("activof", activof);
            parametro.put("activod", activod);
            parametro.put("pasivoc", pasivoc);
            parametro.put("pasivof", pasivof);
            // Capitaltotal
            //parametro.put("capital_2", capitalsocial + utilidad);

            // Capital y utilidad
            parametro.put("totalcapital", capitalsocial + (Double) par.get("utlidadneta"));

            // Pasivo y capital
            parametro.put("pasivoycapital", tpc + tpf + capitalsocial + (Double) par.get("utlidadneta"));
            if (Boolean.parseBoolean(par.get("perdidas").toString())) {
                parametro.put("pasivoycapital", tpc + tpf + capitalsocial - (Double) par.get("utlidadneta"));
            }

            parametro.put("totalpasivo", tpc + tpf);

            Calendar cal = Calendar.getInstance();
            cal.setTime(balance.getFecha());
            parametro.put("fecha", "Balance General al " + cal.get(cal.DAY_OF_MONTH) + " de " + meses[cal.get(cal.MONTH)] + " de " + cal.get(cal.YEAR));

            if (print) {
                //Reporte diseñado y compilado con iReport
                JasperPrint jasperPrint = JasperFillManager.fillReport(masterReport, parametro, conn);

                //Se lanza el Viewer de Jasper, no termina aplicación al salir
                JasperViewer jviewer = new JasperViewer(jasperPrint, false);
                jviewer.setTitle("Balance General");
                jviewer.setVisible(true);
            }
        } catch (Exception j) {
            System.out.println("Mensaje de Error:" + j.getMessage());
            j.printStackTrace();
        }
        Map mapa = new HashMap();
        mapa.putAll(parametro);
        mapa.putAll(par);
        return mapa;
    }

    private void generarbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarbActionPerformed
        balancegeneral(getBalance(), true, taxes.isSelected());
    }//GEN-LAST:event_generarbActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        finanzasPUEntityManager.refresh(getBalance());
        Connection conn = null;
        final String login = "root"; //usuario de acceso a MySQL
        final String password = "samurai1"; //contraseña de usuario
        String url = "jdbc:mysql://127.0.0.1/finanzas";

        try {
            Class.forName("com.mysql.jdbc.Driver"); //se carga el driver
            conn = DriverManager.getConnection(url, login, password);
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }


        try {
            // Estado de resultados
            Map parametro = generarEstadoResultados(getBalance(), taxes.isSelected());
            System.out.println("gf: " + parametro.get("gastosfinancieros"));

            String master = this.getClass().getResource("EstadoResultados_2.jasper").getFile();
            if (Boolean.parseBoolean(parametro.get("perdidas").toString())) {
                master = this.getClass().getResource("EstadoResultados_2_1.jasper").getFile();
                //"/EstadoResultados.jasper";
            }

            System.out.println("master" + master);
            if (master == null) {
                System.out.println("No encuentro el archivo del reporte maestro.");
                System.exit(2);
            }

            JasperReport masterReport = null;
            try {
                masterReport = (JasperReport) JRLoader.loadObject(master);
            } catch (JRException e) {
                System.out.println("Error cargando el reporte maestro: " + e.getMessage());
                System.exit(3);
            }


            Calendar cal = Calendar.getInstance();
            cal.setTime(balance.getFecha());
            parametro.put("fecha", "Estado de Restulados del 1 al " + cal.get(cal.DAY_OF_MONTH) + " de " + meses[cal.get(cal.MONTH)] + " de " + cal.get(cal.YEAR));
            //Reporte diseñado y compilado con iReport
            JasperPrint jasperPrint = JasperFillManager.fillReport(masterReport, parametro, conn);

            //Se lanza el Viewer de Jasper, no termina aplicación al salir
            JasperViewer jviewer = new JasperViewer(jasperPrint, false);
            jviewer.setTitle("Balance General");
            jviewer.setVisible(true);

        } catch (Exception j) {
            System.out.println("Mensaje de Error:" + j.getMessage());
            j.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void generarb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarb1ActionPerformed

        finanzasPUEntityManager.refresh(getBalance());
        Connection conn = null;
        final String login = "root"; //usuario de acceso a MySQL
        final String password = "samurai1"; //contraseña de usuario
        String url = "jdbc:mysql://127.0.0.1/finanzas";

        try {
            Class.forName("com.mysql.jdbc.Driver"); //se carga el driver
            conn = DriverManager.getConnection(url, login, password);
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }


        try {
            // Estado de resultados
            Map params = balancegeneral(getBalance(), false, taxes.isSelected());
            Map parametro = new HashMap();


            String master = this.getClass().getResource("RazonesFinancieras.jasper").getFile();

            System.out.println("master" + master);
            if (master == null) {
                System.out.println("No encuentro el archivo del reporte maestro.");
                System.exit(2);
            }

            JasperReport masterReport = null;
            try {
                masterReport = (JasperReport) JRLoader.loadObject(master);
            } catch (JRException e) {
                System.out.println("Error cargando el reporte maestro: " + e.getMessage());
                System.exit(3);
            }

            Double bancos = 0.0;
            Double caja = 0.0;
            Double activoc = 0.0;
            Double activof = 0.0;
            Double pasivoc = 0.0;
            if (params.get("caja") != null) {
                caja = Double.valueOf(params.get("caja").toString());
            }
            if (params.get("bancos") != null) {
                bancos = Double.valueOf(params.get("bancos").toString());
            }
            if (params.get("activoc") != null) {
                activoc = Double.valueOf(params.get("activoc_").toString());
            }
            if (params.get("activof") != null) {
                activof = Double.valueOf(params.get("activof_").toString());
            }
            if (params.get("pasivoc") != null) {
                pasivoc = Double.valueOf(params.get("pasivoc_").toString());
            }
            Double activo = Double.valueOf(params.get("totalactivo").toString());
            Double pasivo = Double.valueOf(params.get("totalpasivo").toString());
            Double capital = Double.valueOf(params.get("totalcapital").toString());
            Double capitals = Double.valueOf(params.get("capitals").toString());
            Double ventas = Double.valueOf(params.get("ventas").toString());
            Double utilidad = Double.valueOf(params.get("utlidadneta").toString());

            parametro.put("liquidez", (caja + bancos) / (pasivoc * 100.0));
            parametro.put("solvencia", activoc / (pasivoc * 100.0));
            parametro.put("estabilidad", pasivo / (activo * 100.0));
            parametro.put("inmovilizacion", activof / (capital * 100));
            parametro.put("rentabilidad1", utilidad / (ventas * 100));
            parametro.put("rentabilidad2", utilidad / (capitals * 100));

            parametro.put("empresa", params.get("empresa"));
            Calendar cal = Calendar.getInstance();
            cal.setTime(balance.getFecha());
            parametro.put("fecha", "Razones Financieras al " + cal.get(cal.DAY_OF_MONTH) + " de " + meses[cal.get(cal.MONTH)] + " de " + cal.get(cal.YEAR));
            //Reporte diseñado y compilado con iReport
            JasperPrint jasperPrint = JasperFillManager.fillReport(masterReport, parametro, conn);

            //Se lanza el Viewer de Jasper, no termina aplicación al salir
            JasperViewer jviewer = new JasperViewer(jasperPrint, false);
            jviewer.setTitle("Razones Financieras");
            jviewer.setVisible(true);

        } catch (Exception j) {
            System.out.println("Mensaje de Error:" + j.getMessage());
            j.printStackTrace();
        }
    }//GEN-LAST:event_generarb1ActionPerformed

    private void generarb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarb2ActionPerformed
        razonesestandar.setVisible(true);
    }//GEN-LAST:event_generarb2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        liq.setText("");
        sol.setText("");
        est.setText("");
        inm.setText("");
        ven.setText("");
        inv.setText("");
        razonesestandar.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        finanzasPUEntityManager.refresh(getBalance());
        Connection conn = null;
        final String login = "root"; //usuario de acceso a MySQL
        final String password = "samurai1"; //contraseña de usuario
        String url = "jdbc:mysql://127.0.0.1/finanzas";

        try {
            Class.forName("com.mysql.jdbc.Driver"); //se carga el driver
            conn = DriverManager.getConnection(url, login, password);
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }


        try {
            // Estado de resultados
            Map params = balancegeneral(getBalance(), false, taxes.isSelected());
            Map parametro = new HashMap();


            String master = this.getClass().getResource("RazonesEstandar.jasper").getFile();

            System.out.println("master" + master);
            if (master == null) {
                System.out.println("No encuentro el archivo del reporte maestro.");
                System.exit(2);
            }

            JasperReport masterReport = null;
            try {
                masterReport = (JasperReport) JRLoader.loadObject(master);
            } catch (JRException e) {
                System.out.println("Error cargando el reporte maestro: " + e.getMessage());
                System.exit(3);
            }

            Double caja = Double.valueOf(params.get("caja").toString());
            Double bancos = Double.valueOf(params.get("bancos").toString());
            Double activoc = Double.valueOf(params.get("activoc_").toString());
            Double activof = Double.valueOf(params.get("activof_").toString());
            Double pasivoc = Double.valueOf(params.get("pasivoc_").toString());
            Double activo = Double.valueOf(params.get("totalactivo").toString());
            Double pasivo = Double.valueOf(params.get("totalpasivo").toString());
            Double capital = Double.valueOf(params.get("totalcapital").toString());
            Double capitals = Double.valueOf(params.get("capitals").toString());
            Double ventas = Double.valueOf(params.get("ventas").toString());
            Double utilidad = Double.valueOf(params.get("utlidadneta").toString());

            parametro.put("liquidez", (caja + bancos) / (pasivoc));
            parametro.put("solvencia", activoc / (pasivoc));
            parametro.put("estabilidad", pasivo / (activo));
            parametro.put("inmovilizacion", activof / (capital));
            parametro.put("rentabilidad1", utilidad / (ventas));
            parametro.put("rentabilidad2", utilidad / (capitals));

            if (liq.getText().equals("") || sol.getText().equals("") || est.getText().equals("") || inm.getText().equals("") || ven.getText().equals("") || inv.getText().equals("")) {
                return;
            }
            parametro.put("liquidez_1", Double.valueOf(liq.getText()));
            parametro.put("solvencia_1", Double.valueOf(sol.getText()));
            parametro.put("estabilidad_1", Double.valueOf(est.getText()));
            parametro.put("inmovilizacion_1", Double.valueOf(inm.getText()));
            parametro.put("rentabilidad1_1", Double.valueOf(ven.getText()));
            parametro.put("rentabilidad2_1", Double.valueOf(inv.getText()));

            parametro.put("diff_1", (caja + bancos) / (pasivoc) - Double.valueOf(liq.getText()));
            parametro.put("diff_2", activoc / pasivoc - Double.valueOf(sol.getText()));
            parametro.put("diff_3", Double.valueOf(est.getText()) - pasivo / activo);
            parametro.put("diff_4", Double.valueOf(inm.getText()) - activof / capital);
            parametro.put("diff_5", utilidad / ventas - Double.valueOf(ven.getText()));
            parametro.put("diff_6", utilidad / capitals - Double.valueOf(inv.getText()));

            parametro.put("empresa", params.get("empresa"));
            Calendar cal = Calendar.getInstance();
            cal.setTime(balance.getFecha());
            parametro.put("fecha", "Razones Estandar al " + cal.get(cal.DAY_OF_MONTH) + " de " + meses[cal.get(cal.MONTH)] + " de " + cal.get(cal.YEAR));
            //Reporte diseñado y compilado con iReport
            JasperPrint jasperPrint = JasperFillManager.fillReport(masterReport, parametro, conn);

            //Se lanza el Viewer de Jasper, no termina aplicación al salir
            JasperViewer jviewer = new JasperViewer(jasperPrint, false);
            jviewer.setTitle("Razones Estandar");
            jviewer.setVisible(true);

            liq.setText("");
            sol.setText("");
            est.setText("");
            inm.setText("");
            ven.setText("");
            inv.setText("");
            razonesestandar.setVisible(false);
        } catch (Exception j) {
            System.out.println("Mensaje de Error:" + j.getMessage());
            j.printStackTrace();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        CompareWindow.setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    public void estadoOrigen( Balance b1, Balance b2 ){
        Set<Esquema> eb1 = b1.getEsquemas();
        // Origenes
        Map<String, Double> apasivos = new HashMap<String, Double>();
        Map<String, Double> acapital = new HashMap<String, Double>();
        Map<String, Double> dactivos = new HashMap<String, Double>();
        // Aplicaciones
        Map<String, Double> dpasivos = new HashMap<String, Double>();
        Map<String, Double> dcapital = new HashMap<String, Double>();
        Map<String, Double> aactivos = new HashMap<String, Double>();

        for( Esquema e1 : eb1 ){
            int tipo = e1.getCuenta().getTipo();
            if( tipo > 0 &&
                    tipo <= 5){
                String nombre = e1.getCuenta().getNombre();
                Esquema e2 = getEsquema(nombre, b2);
                Double diff = e2.getSaldo() - e1.getSaldo();
                if(diff != 0)
                if( diff > 0 ){ // Origen(Aumento)
                    if( tipo>0 && tipo<=3 )
                       dactivos.put(nombre, diff<0?-diff:diff);
                    if( tipo==4 || tipo == 5 )
                       apasivos.put(nombre, diff<0?-diff:diff);
                }else{ // Aplicacion(Disminucion)
                    if( tipo>0 && tipo<=3 )
                       aactivos.put(nombre, diff<0?-diff:diff);
                    if( tipo==4 || tipo == 5 )
                       dpasivos.put(nombre, diff<0?-diff:diff);
                }
            }
        }
        Map es1 = generarEstadoResultados(b1, false);
        Map es2 = generarEstadoResultados(b2, false);
        Double utilidad = (Double)es1.get("utlidadneta") - (Double)es2.get("utlidadneta");

        Double capsocial = getEsquema("Capital Social", b1).getSaldo()-getEsquema("Capital Social", b2).getSaldo();
        if( utilidad < 0 )
            dcapital.put("Utilidad neta", -utilidad);
        if( utilidad > 0 )
            acapital.put("Utilidad neta", utilidad);
        if( capsocial < 0 )
            acapital.put("Capital social", -capsocial);
        if( capsocial > 0 )
            acapital.put("Capital social", capsocial);

        StringBuilder sb = new StringBuilder();
        sb.append("<html><body>");
        sb.append("<div style='font-family:Sans-Serif;font-size:14px;' align='center'>" + b1.getEmpresa().getNombre() + "</div>");
        sb.append("<div style='font-family:Sans-Serif;font-size:10px;' align='center'>Estado de Origen y Aplicacion de Recursos</div>");
        sb.append("<p>&nbsp;</p>");
        sb.append("<table width='100%' style='font-family:Sans-Serif;font-size:10px;'>");
        sb.append("<tr><td><u>Origen</u></td><td><u>Aplicacion</u></td></tr>");
        sb.append("<tr><td valign='top'>&nbsp;a) Aumento de Pasivos<br>" + tableHTMLOrigen(apasivos) + "</td>");
        sb.append("<td valign='top'>&nbsp;a) Disminucion de Pasivos<br>" + tableHTMLOrigen(dpasivos) + "</td></tr>");
        sb.append("<tr><td valign='top'>&nbsp;b) Aumento de Capital<br>" + tableHTMLOrigen(acapital) + "</td>");
        sb.append("<td valign='top'>&nbsp;b) Disminucion de Capital<br>" + tableHTMLOrigen(dcapital) + "</td></tr>");
        sb.append("<tr><td valign='top'>&nbsp;c) Disminucion de Activos<br>" + tableHTMLOrigen(dactivos) + "</td>");
        sb.append("<td valign='top'>&nbsp;c) Aumento de activos<br>" + tableHTMLOrigen(aactivos) + "</td></tr>");

        OrigenyResultado or = new OrigenyResultado();
        or.panel.setText(sb.toString());
        or.setVisible(true);
    }

    private String tableHTMLOrigen( Map<String, Double> map ){
        StringBuilder sb = new StringBuilder();
        sb.append("<table width='80%' style='margin-left:20px;'>");
        for( String account : map.keySet() ){
            sb.append("<tr><td>" + account + "</td>");
            sb.append("<td align='right'>" + map.get(account) + "</td></tr>");
        }
        sb.append("</table>");
        return sb.toString();
    }

    public double PEU(double utilidad, double preciounitario) {
        Esquema gastosoperacion = getEsquema("Gastos de operacion", getBalance());
        Esquema capitalsocial = getEsquema("Capital Social", getBalance());

        Esquema ventas = getEsquema("Ventas", getBalance());
        Esquema costoventas = getEsquema("Costo de Ventas", getBalance());

        double cvp = costoventas.getSaldo() / ventas.getSaldo();

        double peu = (gastosoperacion.getSaldo() + capitalsocial.getSaldo()) / (1 - cvp);
        double cvt = (peu / preciounitario) * (cvp * preciounitario);

        Abono x = new Abono(peu-ventas.getSaldo());
        Cargo y = new Cargo(peu-ventas.getSaldo());

        addOperacion(y, x, "Caja", "Ventas" );

        Abono a = new Abono(cvt - costoventas.getSaldo());
        Cargo b = new Cargo(cvt - costoventas.getSaldo());

        addOperacion(b, a, "Costo de Ventas", "Almacen" );

        return peu;
    }

    public void Inversion(double cantidad, int periodos, int ayos, double interes) {
        double vf = cantidad * Math.pow(1 + interes, (ayos * 12) / periodos);
        double in = vf - cantidad;

        Abono x = new Abono(in);
        Cargo y = new Cargo(in);

        addOperacion(y, x, "Bancos", "Gastos de operacion" );

    }

    public void DepreciaryAmortizar(int a) {
        Map<String, Integer> d = new HashMap<String, Integer>();
        d.put("Edificios", 20);
        d.put("Mobiliario", 10);
        d.put("Equipo de Transporte", 5);
        d.put("Equipo de Reparto", 5);
        d.put("Equipo de Computo", 4);
        d.put("Gastos de Organizacion", 20);
        d.put("Gastos de Instalacion", 20);

        Set<Esquema> esq = balance.getEsquemas();

        for (Esquema e : esq) {
            String prefix = "Depreciacion de ";
            if (e.getCuenta().getTipo() == 2 &&
                    d.containsKey(e.getCuenta().getNombre())) {
                String account = e.getCuenta().getNombre();
                Double depanual = e.getSaldo() / d.get(account);
                Double depreciacion = depanual * a;

                Abono z = new Abono(depreciacion);
                Cargo x = new Cargo(depreciacion);

                addOperacion(x, z, "Gastos de operacion", prefix + account );
                continue;
            }
            String prefix2 = "Amortizacion de ";
            if (e.getCuenta().getTipo() == 3 &&
                    d.containsKey(e.getCuenta().getNombre())) {
                String account = e.getCuenta().getNombre();
                Double depanual = e.getSaldo() / d.get(account);
                Double amortizacion = depanual * a;

                Abono z = new Abono(amortizacion);
                Cargo x = new Cargo(amortizacion);

                addOperacion(x, z, "Gastos de operacion", prefix2 + account );
                continue;
            }
        }
    }

    public void addOperacion(Cargo x, Abono z, String c, String a) {
        List<Esquema> newEsquemas = new ArrayList<Esquema>();
        /* Registrar Operacion */
        Operacion op = new Operacion();

        Esquema e1 = getEsquema(a, getBalance());
        Esquema e2 = getEsquema(c, getBalance());

        if (e1 == null) {
            e1 = addEsquema(a);
            newEsquemas.add(e1);
        }
        if (e2 == null) {
            e2 = addEsquema(c);
            newEsquemas.add(e2);
        }

        op.getAbonos().add(z);
        op.getCargos().add(x);

        z.setOperacion(op);
        z.setEsquema(e1);

        x.setOperacion(op);
        x.setEsquema(e2);

        e1.getAbonos().add(z);
        e2.getCargos().add(x);

        finanzasPUEntityManager.getTransaction().begin();
        finanzasPUEntityManager.persist(e1);
        finanzasPUEntityManager.persist(e2);
        finanzasPUEntityManager.persist(op);
        finanzasPUEntityManager.persist(getBalance());
        finanzasPUEntityManager.getTransaction().commit();

        /* Registrar Operacion */
        finanzasPUEntityManager.refresh(getBalance());

        for (JTable tabla : currentEsquemas.values()) {
            refreshEsquema(tabla.getName());
        }

        for (Esquema e : newEsquemas) {
            mostrarEsquema(e.getCuenta().getNombre(), e);
        }
    }
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        finanzasPUEntityManager.refresh(getBalance());
        Connection conn = null;
        final String login = "root"; //usuario de acceso a MySQL
        final String password = "samurai1"; //contraseña de usuario
        String url = "jdbc:mysql://127.0.0.1/finanzas";

        try {
            Class.forName("com.mysql.jdbc.Driver"); //se carga el driver
            conn = DriverManager.getConnection(url, login, password);
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }


        try {
            // Estado de resultados
            Map params = new HashMap();
            Balance bs1 = null;
            Balance bs0 = getBalance();

            for (Balance ba : getBalance().getEmpresa().getBalances()) {
                String cmp = DateFormat.getDateInstance().format(ba.getFecha());
                System.out.println(cmp + "--" + selectedBalance);
                if (cmp.equals(selectedBalance)) {
                    bs1 = ba;
                }
            }
            Balance tmp = null;
            if (bs0.getFecha().compareTo(bs1.getFecha()) > 0) {
                tmp = bs0;
                bs0 = bs1;
                bs1 = tmp;
            }

            estadoOrigen(bs0, bs1);

            Map b1 = balancegeneral(bs0, false, taxes.isSelected());
            Map b2 = balancegeneral(bs1, false, taxes2.isSelected());

            //--------------------------------
            Map ac1 = (Map) b1.get("activoc");
            Map ac2 = (Map) b2.get("activoc");
            Map ad1 = (Map) b1.get("activod");
            Map ad2 = (Map) b2.get("activod");
            Map af1 = (Map) b1.get("activof");
            Map af2 = (Map) b2.get("activof");
            //--------------------------------
            Map pc1 = (Map) b1.get("pasivoc");
            Map pc2 = (Map) b2.get("pasivoc");
            Map pf1 = (Map) b1.get("pasivof");
            Map pf2 = (Map) b2.get("pasivof");

            params.putAll(concat(ac1, ac2, "ac"));
            params.putAll(concat(af1, af2, "af"));
            params.putAll(concat(ad1, ad2, "ad"));

            params.putAll(concat(pc1, pc2, "pc"));
            params.putAll(concat(pf1, pf2, "pf"));

            params.put("capitals", b1.containsKey("capitals") ? b1.get("capitals") : 0.0);
            params.put("capitals_a", b2.containsKey("capitals") ? b2.get("capitals") : 0.0);

            params.put("utilidadn", b1.containsKey("utilidadn") ? b1.get("utilidadn") : 0.0);
            params.put("utilidadn_a", b2.containsKey("utilidadn") ? b2.get("utilidadn") : 0.0);

            params.put("totalpasivo", b1.containsKey("totalpasivo") ? b1.get("totalpasivo") : 0.0);
            params.put("totalpasivo_a", b2.containsKey("totalpasivo") ? b2.get("totalpasivo") : 0.0);

            params.put("totalcapital", b1.containsKey("totalcapital") ? b1.get("totalcapital") : 0.0);
            params.put("totalcapital_a", b2.containsKey("totalcapital") ? b2.get("totalcapital") : 0.0);

            params.put("totalactivo", b1.containsKey("totalactivo") ? b1.get("totalactivo") : 0.0);
            params.put("totalactivo_a", b2.containsKey("totalactivo") ? b2.get("totalactivo") : 0.0);

            params.put("pasivoycapital", b1.containsKey("pasivoycapital") ? b1.get("pasivoycapital") : 0.0);
            params.put("pasivoycapital_a", b2.containsKey("pasivoycapital") ? b2.get("pasivoycapital") : 0.0);

            params.put("b1", DateFormat.getDateInstance().format(bs0.getFecha()));
            params.put("b2", DateFormat.getDateInstance().format(bs1.getFecha()));

            params.put("empresa", getBalance().getEmpresa().getNombre());

            Map params2 = generarEstadoResultados(bs0, taxes.isSelected());
            Map e2 = generarEstadoResultados(bs1, taxes2.isSelected());

            for (Object key : params2.keySet()) {
                if (params2.get(key) != null && e2.get(key) == null) {
                    e2.put(key, 0.0);
                }
            }
            for (Object key : e2.keySet()) {
                params2.put(key + "_a", e2.get(key));
                if (params2.get(key) == null && e2.get(key) != null) {
                    params2.put(key, 0.0);
                    System.out.println(key);
                }
            }

            params2.put("b1", DateFormat.getDateInstance().format(bs0.getFecha()));
            params2.put("b2", DateFormat.getDateInstance().format(bs1.getFecha()));

            //----------------1---------------------
            String master = this.getClass().getResource("BalanceGeneralComparativos.jasper").getFile();
            System.out.println("master" + master);
            if (master == null) {
                System.out.println("No encuentro el archivo del reporte maestro.");
                System.exit(2);
            }
            JasperReport masterReport = null;
            try {
                masterReport = (JasperReport) JRLoader.loadObject(master);
            } catch (JRException e) {
                System.out.println("Error cargando el reporte maestro: " + e.getMessage());
                System.exit(3);
            }
            Calendar cal = Calendar.getInstance();
            cal.setTime(balance.getFecha());
            params.put("fecha", "Balance comparativo k " + cal.get(cal.DAY_OF_MONTH) + " de " + meses[cal.get(cal.MONTH)] + " de " + cal.get(cal.YEAR));
            //Reporte diseñado y compilado con iReport
            JasperPrint jasperPrint = JasperFillManager.fillReport(masterReport, params, conn);

            //Se lanza el Viewer de Jasper, no termina aplicación al salir
            JasperViewer jviewer = new JasperViewer(jasperPrint, false);
            jviewer.setTitle("Razones Financieras");
            jviewer.setVisible(true);
            //------------------------------1-------------------------

            String master2 = this.getClass().getResource("EstadoResultadosComparativo.jasper").getFile();

            if (master2 == null) {
                System.out.println("No encuentro el archivo del reporte maestro.");
                System.exit(2);
            }
            JasperReport masterReport2 = null;
            try {
                masterReport2 = (JasperReport) JRLoader.loadObject(master2);
            } catch (JRException e) {
                System.out.println("Error cargando el reporte maestro: " + e.getMessage());
                System.exit(3);
            }
            Calendar cal2 = Calendar.getInstance();
            cal2.setTime(balance.getFecha());
            params.put("fecha", "Balance comparativo k " + cal2.get(cal2.DAY_OF_MONTH) + " de " + meses[cal2.get(cal2.MONTH)] + " de " + cal2.get(cal2.YEAR));
            //Reporte diseñado y compilado con iReport
            JasperPrint jasperPrint2 = JasperFillManager.fillReport(masterReport2, params2, conn);

            //Se lanza el Viewer de Jasper, no termina aplicación al salir
            JasperViewer jviewer2 = new JasperViewer(jasperPrint2, false);
            jviewer2.setTitle("Razones Financieras");
            jviewer2.setVisible(true);

        } catch (Exception j) {
            System.out.println("Mensaje de Error:" + j.getMessage());
            j.printStackTrace();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        CompareWindow.setVisible(false);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
    }//GEN-LAST:event_jMenu2ActionPerformed

    public Map concat(Map m1, Map m2, String prefix) {
        Map params = new HashMap();
        int c = 1;
        for (Object key : m1.keySet()) {
            params.put(prefix + "_" + (c), key);
            params.put(prefix + "_" + (c) + "_1", m1.get(key));
            //System.out.println( c + " - " + key );
            params.put(prefix + "_" + (c++) + "_1_a", m2.containsKey(key) ? m2.get(key) : 0.0);
            //m2.remove(key);
            }
        for (Object key : m2.keySet()) {
            if (!m1.containsKey(key)) {
                params.put(prefix + "_" + (c), key);
                params.put(prefix + "_" + (c) + "_1_a", m2.get(key));
                //System.out.println( c + " - " + key );
                params.put(prefix + "_" + (c++) + "_1", m1.containsKey(key) ? m1.get(key) : 0.0);
                //m1.remove(key);
                }
        }
        return params;
    }

    public Map<String, Object> generarEstadoResultados(Balance b, boolean hasImpuestos) {
        Map<String, Object> params = new HashMap<String, Object>();
        try {
            params.put("empresa", b.getEmpresa().getNombre());
            Double ventas = getEsquema("Ventas", b).getSaldo();
            params.put("ventas", ventas);
            Double costoventas = getEsquema("Costo de Ventas", b).getSaldo();
            params.put("costoventas", costoventas);
            Double utilidadbruta = ventas - costoventas;
            params.put("utilidadbruta", utilidadbruta);

            Double gastosventas = 0.0;
            if (getEsquema("Gastos de ventas", b) != null) {
                gastosventas = getEsquema("Gastos de ventas", b).getSaldo();
            }

            params.put("gastosventas", gastosventas == 0 ? null : gastosventas);
            Double gastosadministracion = 0.0;
            if (getEsquema("Gastos de administracion", b) != null) {
                gastosadministracion = getEsquema("Gastos de administracion", b).getSaldo();
            }

            params.put("gastosadministracion", gastosadministracion == 0 ? null : gastosadministracion);

            Double gastosva = gastosventas + gastosadministracion;
            params.put("gastos", gastosva == 0 ? null : gastosva);

            Double gastosfinancieros = 0.0;
            if (getEsquema("Gastos financieros", b) != null) {
                gastosfinancieros = getEsquema("Gastos financieros", b).getSaldo();
            }


            params.put("gastosfinancieros", gastosfinancieros == 0 ? null : gastosfinancieros);
            Double productosfinancieros = 0.0;
            if (getEsquema("Productos financieros", b) != null) {
                productosfinancieros = getEsquema("Productos financieros", b).getSaldo();
            }
            params.put("productosfinancieros", productosfinancieros == 0 ? null : productosfinancieros);

            Double gpfinancieros = gastosfinancieros - productosfinancieros;

            Double gastosyproductos;
            if (gpfinancieros < 0) {
                gpfinancieros = -gpfinancieros;
                gastosyproductos = gastosva - gpfinancieros;

            } else {
                gastosyproductos = gastosva + gpfinancieros;
            }

            params.put("financieros", gpfinancieros == 0 ? null : gpfinancieros);

            params.put("gastosyproductos", gastosyproductos == 0 ? null : gastosyproductos);
            if (getEsquema("Gastos de operacion", b) != null) {
                params.put("gastosyproductos", getEsquema("Gastos de operacion", b).getSaldo());
                params.put("gastosoperacion", getEsquema("Gastos de operacion", b).getSaldo());
                gastosyproductos = getEsquema("Gastos de operacion", b).getSaldo();
            }

            boolean perdidas = false;

            Double utilidadoperacion = utilidadbruta - gastosyproductos; // Revisar
            if (utilidadoperacion < 0) {
                //utilidadoperacion = -utilidadoperacion;
                perdidas = true;
            }
            System.out.println("perdidas : " + perdidas);
            params.put("perdidas", perdidas);
            params.put("utilidadoperacion", utilidadoperacion == 0 ? null : utilidadoperacion);
            Double otrosgastos = 0.0;
            if (getEsquema("Otros gastos", b) != null) {
                otrosgastos = getEsquema("Otros gastos", b).getSaldo();
            }
            params.put("otrosgastos", otrosgastos == 0 ? null : otrosgastos);
            Double otrosproductos = 0.0;
            if (getEsquema("Otros productos", b) != null) {
                otrosproductos = getEsquema("Otros productos", b).getSaldo();
            }
            params.put("otrosproductos", otrosproductos == 0 ? null : otrosproductos);
            Double ogop = otrosgastos - otrosproductos;


            Double utilidadadi;
            if (ogop < 0) {
                ogop = -ogop;
                utilidadadi = utilidadoperacion + ogop;
            } else {
                utilidadadi = utilidadoperacion - ogop;
            }
            params.put("otros", ogop == 0 ? null : ogop);

            Double impuestos = 0.0;
            if (hasImpuestos) {
                Double isr = utilidadadi * 0.36;
                Double ptu = utilidadadi * 0.10;
                impuestos = isr + ptu;
                params.put("isr", isr == 0 ? null : isr);
                params.put("ptu", ptu == 0 ? null : ptu);
                params.put("utilidadadi", utilidadadi == 0 ? null : utilidadadi);
            }
            params.put("impuestos", impuestos == 0 ? null : impuestos);
            Double utilidad = utilidadadi - impuestos;
            params.put("utlidadneta", utilidad == 0 ? null : utilidad);
            utilidadnt = utilidad;
            if (perdidas) {
                params.put("utlidadneta", utilidadadi == 0 ? null : utilidadadi);
                utilidadnt = utilidadadi;
                impuestos = null;
                params.put("impuestos", null);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "No se puede generar el estado de resultados con las cuentas existentes.");
        }
        return params;
    }

    private Esquema getEsquema(String cuenta, Balance b) {
        Esquema esquema = null;
        for (Esquema e : b.getEsquemas()) {
            if (e.getCuenta().getNombre().equals(cuenta)) {
                esquema = e;
                break;
            }
        }
        return esquema;
    }

    private void deleteOperacion(Operacion o) {
        final boolean ac = finanzasPUEntityManager.getTransaction().isActive();
        if (!ac) {
            finanzasPUEntityManager.getTransaction().begin();
        }
        for (Cargo c : o.getCargos()) {
            c.getEsquema().getCargos().remove(c);
            finanzasPUEntityManager.remove(c);
        }

        for (Abono a : o.getAbonos()) {
            a.getEsquema().getAbonos().remove(a);
            finanzasPUEntityManager.remove(a);
        }
        finanzasPUEntityManager.remove(o);
        if (!ac) {
            finanzasPUEntityManager.getTransaction().commit();
        }
    }

    private void refreshEsquema(String nombre) {
        Esquema esquema = getEsquema(nombre, getBalance());
        JTable tabla = currentEsquemas.get(nombre);

        /*TableCellRenderer renderer = new CustomTableCellRenderer();
        try {
        tabla.setDefaultRenderer(Object.class, renderer);
        } catch (Exception ex) {
        ex.printStackTrace();
        }*/

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Id");
        modelo.addColumn("Cargo");
        modelo.addColumn("Abono");
        modelo.addColumn("Id");


        Object[] abonos = esquema.getAbonos().toArray();
        Object[] cargos = esquema.getCargos().toArray();

        int operaciones = abonos.length > cargos.length ? abonos.length : cargos.length;
        //System.out.println("op:" + operaciones);
        Double sumaCargos = 0.0, sumaAbonos = 0.0;
        for (int i = 0; i < operaciones; i++) {
            Object operacion[] = new Object[4];
            if (i < cargos.length) {
                Cargo c = (Cargo) cargos[i];
                operacion[0] = c.getOperacion().getId();
                operacion[1] = c.getCantidad();
                sumaCargos += c.getCantidad();
            }
            if (i < abonos.length) {
                Abono a = (Abono) abonos[i];
                operacion[2] = a.getCantidad();
                operacion[3] = a.getOperacion().getId();
                sumaAbonos += a.getCantidad();
            }
            modelo.addRow(operacion);
        }
        tabla.setModel(modelo);
        System.out.println(esquema.getCuenta().getNombre() + " : " + operaciones);

        JTable EsquemaParcialk = currentSaldos.get(nombre);
        JLabel EsquemaResultadok = Saldos.get(nombre);
        EsquemaParcialk.getModel().setValueAt(sumaCargos.toString(), 0, 0);
        EsquemaParcialk.getModel().setValueAt(sumaAbonos.toString(), 0, 1);
        Double sal = sumaCargos - sumaAbonos;
        EsquemaResultadok.setText((sal < 0 ? "Acredor" : "Deudor") + ": $" + (sal < 0 ? -sal : sal));

        final Esquema innerEsquema = esquema;
        tabla.setName(nombre);
        tabla.getModel().addTableModelListener(
                new javax.swing.event.TableModelListener() {

                    public void tableChanged(TableModelEvent e) {
                        int row = e.getFirstRow();
                        int column = e.getColumn();
                        TableModel model = (TableModel) e.getSource();
                        String columnName = model.getColumnName(column);
                        Object data = model.getValueAt(row, column);

                        Esquema schema = finanzasPUEntityManager.merge(innerEsquema);
                        JTable EsquemaParciall = currentSaldos.get(schema.getCuenta().getNombre());
                        JLabel EsquemaResultadol = Saldos.get(schema.getCuenta().getNombre());
                        if (column == 1) {
                            //System.out.println("Cargo: " + data);
                            Double anterior = schema.getCargos().get(row).getCantidad();
                            schema.getCargos().get(row).setCantidad(Double.valueOf((String) data));
                            Double actual = Double.valueOf((String) data);
                            Double last = Double.valueOf(EsquemaParciall.getModel().getValueAt(0, 0).toString());
                            EsquemaParciall.getModel().setValueAt("" + (last - anterior + actual), 0, 0);
                            System.out.println(last - anterior + actual);
                        } else if (column == 2) {
                            //System.out.println("Abono: " + data);
                            Double anterior = schema.getAbonos().get(row).getCantidad();
                            schema.getAbonos().get(row).setCantidad(Double.valueOf((String) data));
                            Double actual = Double.valueOf((String) data);
                            Double last = Double.valueOf(EsquemaParciall.getModel().getValueAt(0, 1).toString());
                            EsquemaParciall.getModel().setValueAt("" + (last - anterior + actual), 0, 1);
                        }
                        Double sal = Double.valueOf(EsquemaParciall.getModel().getValueAt(0, 0).toString()) -
                                Double.valueOf(EsquemaParciall.getModel().getValueAt(0, 1).toString());
                        ;
                        EsquemaResultadol.setText((sal < 0 ? "Acredor" : "Deudor") + ": $" + (sal < 0 ? -sal : sal));

                        finanzasPUEntityManager.getTransaction().begin();
                        finanzasPUEntityManager.persist(schema);
                        finanzasPUEntityManager.getTransaction().commit();

                        //System.out.println(innerEsquema.getCuenta().getNombre());
                    }
                });
        tabla.getTableHeader().getColumnModel().getColumn(0).setMaxWidth(0);
        tabla.getTableHeader().getColumnModel().getColumn(0).setMinWidth(0);
        tabla.getTableHeader().getColumnModel().getColumn(0).setPreferredWidth(0);
        tabla.getTableHeader().getColumnModel().getColumn(0).setResizable(false);

        tabla.getTableHeader().getColumnModel().getColumn(3).setMaxWidth(0);
        tabla.getTableHeader().getColumnModel().getColumn(3).setMinWidth(0);
        tabla.getTableHeader().getColumnModel().getColumn(3).setPreferredWidth(0);
        tabla.getTableHeader().getColumnModel().getColumn(3).setResizable(false);
        //tabla.repaint();
    }

    private boolean confirm(String text) {
        boolean c = false;
        String string1 = "Continuar";
        String string2 = "Cancelar";
        Object[] options = {string1, string2};
        int n = JOptionPane.showOptionDialog(this,
                text,
                "Confirmar",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, //don't use a custom Icon
                options, //the titles of buttons
                string1); //the title of the default button
        if (n == JOptionPane.OK_OPTION) {
            c = true;
        }

        return c;
    }

    private void mostrarEsquema(String nombre, Esquema esquema) {
        javax.swing.JButton EsquemaCalculark;
        javax.swing.JButton EsquemaEditark;
        javax.swing.JTable EsquemaParcialk;
        javax.swing.JLabel EsquemaResultadok;
        javax.swing.JTable EsquemaTablek;
        javax.swing.JInternalFrame EsquemaWindowk;
        javax.swing.JSeparator Linek;
        javax.swing.JScrollPane Scroll1k;
        javax.swing.JScrollPane Scroll2k;

        EsquemaWindowk = new javax.swing.JInternalFrame();
        Scroll1k = new javax.swing.JScrollPane();
        EsquemaTablek = new javax.swing.JTable();
        Scroll2k = new javax.swing.JScrollPane();
        EsquemaParcialk = new javax.swing.JTable();
        EsquemaResultadok = new javax.swing.JLabel();
        EsquemaEditark = new javax.swing.JButton();
        EsquemaCalculark = new javax.swing.JButton();
        Linek = new javax.swing.JSeparator();

        TableCellRenderer renderer = new CustomTableCellRenderer();
        try {
            EsquemaTablek.setDefaultRenderer(Object.class, renderer);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        EsquemaWindowk.setClosable(true);
        EsquemaWindowk.setIconifiable(true);
        EsquemaWindowk.setTitle(nombre);
        EsquemaWindowk.setVisible(true);
        EsquemaWindowk.toFront();

        EsquemaTablek.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {null, null},
                    {null, null},
                    {null, null},
                    {null, null},
                    {null, null},
                    {null, null},
                    {null, null}
                },
                new String[]{
                    "Cargos", "Abonos"
                }) {

            Class[] types = new Class[]{
                java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        Scroll1k.setViewportView(EsquemaTablek);
        EsquemaTablek.setCellSelectionEnabled(true);
        EsquemaTablek.getColumnModel().getColumn(0).setHeaderValue("Cargos");
        EsquemaTablek.getColumnModel().getColumn(1).setHeaderValue("Abonos");

        Scroll2k.setFocusable(false);

        EsquemaParcialk.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{{0.0, 0.0}},
                new String[]{
                    "", ""
                }));
        EsquemaParcialk.setFocusable(false);
        EsquemaParcialk.setRequestFocusEnabled(false);
        EsquemaParcialk.setRowSelectionAllowed(false);
        EsquemaParcialk.getTableHeader().setReorderingAllowed(false);
        Scroll2k.setViewportView(EsquemaParcialk);

        EsquemaEditark.setText("X");

        EsquemaCalculark.setText("Actualizar");
        final String account = nombre;
        final JTable tbl = EsquemaTablek;
        EsquemaCalculark.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshEsquema(account);
            }
        });

        EsquemaEditark.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (confirm("Al eliminar este cargo/abono, se eliminara la operacion completa\njunto con los demas cargos/abonos" +
                        " asociados\n¿Desea continuar?")) {
                    Esquema e = getEsquema(account, getBalance());
                    int row = tbl.getSelectedRow();
                    int col = tbl.getSelectedColumn();
                    if (row >= 0) {
                        if (col == 1) {
                            Cargo c = e.getCargos().get(row);
                            deleteOperacion(c.getOperacion());
                        }
                        if (col == 2) {
                            Abono a = e.getAbonos().get(row);
                            deleteOperacion(a.getOperacion());
                        }

                        for (JTable w : currentEsquemas.values()) {
                            refreshEsquema(w.getName());
                        }
                    }
                }
            }
        });
        org.jdesktop.layout.GroupLayout EsquemaWindowLayout = new org.jdesktop.layout.GroupLayout(EsquemaWindowk.getContentPane());
        EsquemaWindowk.getContentPane().setLayout(EsquemaWindowLayout);

        EsquemaWindowLayout.setHorizontalGroup(
                EsquemaWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(EsquemaWindowLayout.createSequentialGroup().addContainerGap(10, 10).add(EsquemaWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false).add(Linek).add(org.jdesktop.layout.GroupLayout.LEADING, EsquemaWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(EsquemaResultadok).add(EsquemaWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false).add(org.jdesktop.layout.GroupLayout.LEADING, Scroll1k, 210, 210, 300).add(org.jdesktop.layout.GroupLayout.LEADING, Scroll2k, 0, 0, Short.MAX_VALUE).add(org.jdesktop.layout.GroupLayout.LEADING, EsquemaWindowLayout.createSequentialGroup().add(EsquemaEditark).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(EsquemaCalculark))))).addContainerGap()));
        EsquemaWindowLayout.setVerticalGroup(
                EsquemaWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(EsquemaWindowLayout.createSequentialGroup().add(10, 10, 10).add(Scroll1k, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 136, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(Scroll2k, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(EsquemaResultadok).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(Linek, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(EsquemaWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(EsquemaEditark).add(EsquemaCalculark)).add(42, 42, 42)));

        EsquemaWindowk.setBounds(100, 10, 239, 330);
        desktop.add(EsquemaWindowk, javax.swing.JLayeredPane.DEFAULT_LAYER);
        OpenAccountFrame.setVisible(false);

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Id");
        modelo.addColumn("Cargo");
        modelo.addColumn("Abono");
        modelo.addColumn("Id");



        Object[] abonos = esquema.getAbonos().toArray();
        Object[] cargos = esquema.getCargos().toArray();
        int operaciones = abonos.length > cargos.length ? abonos.length : cargos.length;

        Double sumaCargos = 0.0;
        Double sumaAbonos = 0.0;

        for (int i = 0; i < operaciones; i++) {
            Object operacion[] = new Object[4];
            if (i < cargos.length) {
                Cargo c = (Cargo) cargos[i];
                operacion[0] = c.getOperacion().getId();
                operacion[1] = c.getCantidad();
                sumaCargos += c.getCantidad();
            }
            if (i < abonos.length) {
                Abono a = (Abono) abonos[i];
                operacion[2] = a.getCantidad();
                operacion[3] = a.getOperacion().getId();
                sumaAbonos += a.getCantidad();
            }
            modelo.addRow(operacion);
        }
        EsquemaTablek.setModel(modelo);

        currentEsquemas.put(nombre, EsquemaTablek);
        currentSaldos.put(nombre, EsquemaParcialk);

        /*EsquemaParcialk.getColumnModel().getColumn(0).setHeaderValue(sumaCargos.toString());
        EsquemaParcialk.getColumnModel().getColumn(1).setHeaderValue(sumaAbonos.toString());
        EsquemaParcialk.getModel().*/
        EsquemaParcialk.getModel().setValueAt(sumaCargos.toString(), 0, 0);
        EsquemaParcialk.getModel().setValueAt(sumaAbonos.toString(), 0, 1);

        Double sal = (sumaCargos - sumaAbonos);
        EsquemaResultadok.setText((sal < 0 ? "Acredor" : "Deudor") + ": $" + (sal < 0 ? -sal : sal));
        Saldos.put(nombre, EsquemaResultadok);

        final Esquema innerEsquema = esquema;
        EsquemaTablek.setName(nombre);
        EsquemaTablek.getModel().addTableModelListener(
                new javax.swing.event.TableModelListener() {

                    public void tableChanged(TableModelEvent e) {
                        int row = e.getFirstRow();
                        int column = e.getColumn();
                        TableModel model = (TableModel) e.getSource();
                        String columnName = model.getColumnName(column);
                        Object data = model.getValueAt(row, column);

                        Esquema schema = finanzasPUEntityManager.merge(innerEsquema);
                        JTable EsquemaParciall = currentSaldos.get(schema.getCuenta().getNombre());
                        JLabel EsquemaResultadol = Saldos.get(schema.getCuenta().getNombre());
                        if (column == 1) {
                            //System.out.println("Cargo: " + data);
                            Double anterior = schema.getCargos().get(row).getCantidad();
                            schema.getCargos().get(row).setCantidad(Double.valueOf((String) data));
                            Double actual = Double.valueOf((String) data);
                            Double last = Double.valueOf(EsquemaParciall.getModel().getValueAt(0, 0).toString());
                            EsquemaParciall.getModel().setValueAt("" + (last - anterior + actual), 0, 0);
                            System.out.println(last - anterior + actual);
                        } else if (column == 2) {
                            //System.out.println("Abono: " + data);
                            Double anterior = schema.getAbonos().get(row).getCantidad();
                            schema.getAbonos().get(row).setCantidad(Double.valueOf((String) data));
                            Double actual = Double.valueOf((String) data);
                            Double last = Double.valueOf(EsquemaParciall.getModel().getValueAt(0, 1).toString());
                            EsquemaParciall.getModel().setValueAt("" + (last - anterior + actual), 0, 1);
                        }
                        Double sal = Double.valueOf(EsquemaParciall.getModel().getValueAt(0, 0).toString()) -
                                Double.valueOf(EsquemaParciall.getModel().getValueAt(0, 1).toString());
                        ;
                        EsquemaResultadol.setText((sal < 0 ? "Acredor" : "Deudor") + ": $" + (sal < 0 ? -sal : sal));



                        finanzasPUEntityManager.getTransaction().begin();
                        finanzasPUEntityManager.persist(schema);
                        finanzasPUEntityManager.getTransaction().commit();

                        //System.out.println(innerEsquema.getCuenta().getNombre());
                    }
                });

        EsquemaTablek.getTableHeader().getColumnModel().getColumn(0).setMaxWidth(0);
        EsquemaTablek.getTableHeader().getColumnModel().getColumn(0).setMinWidth(0);
        EsquemaTablek.getTableHeader().getColumnModel().getColumn(0).setPreferredWidth(0);
        EsquemaTablek.getTableHeader().getColumnModel().getColumn(0).setResizable(false);

        EsquemaTablek.getTableHeader().getColumnModel().getColumn(3).setMaxWidth(0);
        EsquemaTablek.getTableHeader().getColumnModel().getColumn(3).setMinWidth(0);
        EsquemaTablek.getTableHeader().getColumnModel().getColumn(3).setPreferredWidth(0);
        EsquemaTablek.getTableHeader().getColumnModel().getColumn(3).setResizable(false);

        EsquemaWindowk.addInternalFrameListener(new InternalFrameListener() {

            public void internalFrameOpened(InternalFrameEvent e) {
            }

            public void internalFrameClosing(InternalFrameEvent e) {
                if (confirm("Al cerrar esta cuenta se eliminaran todas las operaciones \nrealizadas" +
                        "sobre esta cuenta y las que hayan sido afectadas\nDesea continuar?")) {
                    String nombre = e.getInternalFrame().getTitle();
                    deleteEsquema(nombre);
                    e.getInternalFrame().dispose();

                    /*finanzasPUEntityManager.refresh(balance);*/

                    for (JTable t : currentEsquemas.values()) {
                        refreshEsquema(t.getName());
                    }
                } else {
                    e.getInternalFrame().setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
                }

            }

            public void internalFrameClosed(InternalFrameEvent e) {
            }

            public void internalFrameIconified(InternalFrameEvent e) {
            }

            public void internalFrameDeiconified(InternalFrameEvent e) {
            }

            public void internalFrameActivated(InternalFrameEvent e) {
            }

            public void internalFrameDeactivated(InternalFrameEvent e) {
            }
        });

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new EsquemaMayorMain().setVisible(true);
            }
        });
    }

    public String getSelectedBalance() {
        return selectedBalance;
    }

    public void setSelectedBalance(String selectedBalance) {
        this.selectedBalance = selectedBalance;
    }

    class MyComboBoxRenderer extends JComboBox implements TableCellRenderer {

        public MyComboBoxRenderer(String[] items) {
            super(items);
        }

        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                setForeground(table.getSelectionForeground());
                super.setBackground(table.getSelectionBackground());
            } else {
                setForeground(table.getForeground());
                setBackground(table.getBackground());
            }

            // Select the current value
            setSelectedItem(value);
            return this;
        }
    }

    public class MyComboBoxEditor extends DefaultCellEditor {

        public MyComboBoxEditor(String[] items) {
            super(new JComboBox(items));
        }
    }

    public class CustomTableCellEditor extends DefaultCellEditor {

        public CustomTableCellEditor(Cargo c) {
            super(new JTextField(c.getCantidad().toString()));
        }

        public CustomTableCellEditor(Abono a) {
            super(new JTextField(a.getCantidad().toString()));
        }
    }

    public class CustomTableCellRenderer extends DefaultTableCellRenderer {

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            if (value != null) {
                try {
                    if (column == 1) {
                        Long color = (Long) table.getModel().getValueAt(row, 0);
                        float r = (float) (color / 1000.0f);
                        cell.setBackground(Color.getHSBColor(r, 1.0f, 1.0f));
                    } else if (column == 2) {
                        Long color = (Long) table.getModel().getValueAt(row, 3);
                        float r = (float) (color / 1000.0f);
                        cell.setBackground(Color.getHSBColor(r, 1.0f, 1.0f));
                    } else {
                        cell.setBackground(Color.WHITE);
                    }

                } catch (Exception e) {
                }
            } else {
                cell.setBackground(Color.WHITE);
            }

            return cell;
        }
    }

    /*public static void cascade(JLayeredPane desktopPane, int layer) {
    Component[] frames = desktopPane.getComponentsInLayer(layer);
    if (frames.length == 0) {
    return;
    }
    
    cascade(frames, desktopPane.getBounds(), 24);
    }*/
    public static void cascade(JLayeredPane desktopPane) {
        List<JInternalFrame> lista = new ArrayList<JInternalFrame>();

        for (Component c : desktopPane.getComponents()) {
            if (((JInternalFrame) c).isVisible()) {
                lista.add((JInternalFrame) c);
            }
        }
        //]) desktopPane.getComponents();
        if (lista.size() == 0) {
            return;
        }

        cascade(lista.toArray(new JInternalFrame[1]), desktopPane.getBounds(), 24);
    }

    private static void cascade(JInternalFrame[] frames, Rectangle dBounds, int separation) {
        int margin = frames.length * separation + separation;
        int width = dBounds.width - margin;
        int height = frames[0].getHeight();
        separation = frames[0].getWidth();
        int h = 0, w = 0;

        for (int i = 0; i < (frames.length > 8 ? 8 : frames.length); i++) {
            if ((i % 4) == 0 && i != 0) {
                h++;
                w = 0;
            }
            frames[i].setBounds(w++ * separation,
                    10 + h * height,
                    frames[i].getWidth(), frames[i].getHeight());
        }
        if (frames.length > 8) {
            for (int j = 8; j < frames.length; j++) {
                try {
                    frames[j].setIcon(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(EsquemaMayorMain.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    public Balance getBalance() {
        return finanzasPUEntityManager.merge(balance);
    }

    public void setBalance(Balance balance) {
        this.balance = balance;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JInternalFrame CompareWindow;
    private javax.swing.JButton CuentaAceptar;
    private javax.swing.JButton CuentaCancelar;
    private javax.swing.JComboBox CuentaCombo;
    private javax.swing.JLabel CuentaLbl;
    private javax.swing.JInternalFrame OpenAccountFrame;
    private java.util.List<estadosfinancieros.Cargo> cargoList;
    private javax.persistence.Query cargoQuery;
    private javax.swing.JLabel cargolbl;
    private javax.swing.JTextArea concepto;
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JLabel error1lbl;
    private javax.swing.JTextField est;
    private javax.persistence.EntityManager finanzasPUEntityManager;
    private javax.swing.JButton generarb;
    private javax.swing.JButton generarb1;
    private javax.swing.JButton generarb2;
    private javax.swing.JTextField inm;
    private javax.swing.JTextField inv;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField liq;
    private javax.swing.JComboBox otrosbalances;
    private javax.swing.JInternalFrame razonesestandar;
    private javax.swing.JInternalFrame registerOperation;
    private javax.swing.JButton regop;
    private javax.swing.JTextField sol;
    private javax.swing.JTable tabonos;
    private javax.swing.JCheckBox taxes;
    private javax.swing.JCheckBox taxes2;
    private javax.swing.JTable tcargos;
    private javax.swing.JTextField ven;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
